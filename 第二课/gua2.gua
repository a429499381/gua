const polygon = function(bianchang, bianshu=3) {
    var w = bianchang
    var n = bianshu
    var 内角 = (n - 2) * 180 / n
    var degree = 180 - 内角

    var i = 0
    while(i < n) {
        forward(w)
        
        right(degree)

        // 特别注意，循环结束前一定要改变 i 的值
        // 否则循环永远不会结束的
        i = i + 1
    }
}

const polygon1 = function(bianchang, gao, bianshu=4) {
    var w = bianchang
    var h = gao
    var n = bianshu
    var 内角 = (n - 2) * 180 / n
    var degree = 180 - 内角

    var i = 0
    while(i < n) {
        if(i % 2) {
          forward(h)
        } else {
            forward(w)
        }
        right(degree)

        // 特别注意，循环结束前一定要改变 i 的值
        // 否则循环永远不会结束的
        i = i + 1
    }
}

const jump = function(x, y) {
    penup()
    goto(x, y)
    pendown()
}


const circle = function(x, y, r) {
    var x1 = x
    var y1 = y - r
    var n = 36

    var bianchang = (2 * math.pi * r) / n 
    jump(x1, y1)

    polygon(bianchang, n)
}
const rect = function(x, y, w, h) {
    var x1 = x 
    var y1 = y 
   
    jump(x1, y1)
    polygon1(w, h)
}

const center_rect = function(x, y, w, h) {
    var x1 = x - w / 2
    var y1 = y - h / 2
   
    jump(x1, y1)
    polygon1(w, h)
}

const penta = function(x, y, long) {
    var degree = 144
    var n = 5
    var bianchang = long
    jump(x, y)

     
    var i = 0
    while(i < n) {
        right(degree)
        forward(bianchang)
        // 特别注意，循环结束前一定要改变 i 的值
        // 否则循环永远不会结束的
        i = i + 1
    }
}

const japan = function(x, y) {
    var bianchang = 300
    var r1 = bianchang * 0.6
    var r2 = r1 / 2 //半径
    var cx = bianchang / 2 + x
    var cy = bianchang / 2 + y

    jump(x, y) 
    polygon(300, 4)

    circle(cx, cy, r2)
}


const sin = function(degree) {
    // 这里的 sin 函数接受弧度作为参数
    // 我们这个函数接受角度, 下面是弧度转角度的公式
    var radians = degree * math.pi / 180
    return math.sin(radians)
}

const cos = function(degree) {
    var radians = degree * math.pi / 180
    return math.cos(radians)
}

var penta1 = function(x, y, r) {
    var du = 18
    var x1 = x - cos(du) * r
    var y1 = y - sin(du) * r
    var long = cos(du) * r * 2

    penta(x1, y1, long)
}

const china = function(x, y) {
    var w = 300
    var h = 200
    var r = 10
    var x1 = x + w / 2
    var y1 = y + h / 2
    var n = 4
    var cn = 5
    jump(x, y)
    polygon1(w, h, n)

    const wxBig = function(x, y, r) {
        cn -= 1
        var xb = x + 15 + r * 3
        var yb = y + 15 + r 
        penta1(xb, yb, r)
    } 
    
    wxBig(x, y, 30)
    while(cn > 0) {
        cn -= 1
        setHeading(15)
        penta1(x1, y1, r)
        x1 = x1 + 20 * 2
    }

}

const france = function(x, y) {
    var w = 300
    var h = 200
    var  bianshu = 4
    var n = 0

    var x1 += x
    var y1 += y
    var x2 = x
    var y2 = y + h* 1/3
    var x3 = x 
    var y3 = y + h * 2/3
    var h1 = h * 1/3
    var h2 =  h * 1/3
    var h3 = h * 1/3
    log('x1, y1', x1, y1)
    log('x2, y2', x2, y2)
    log('x3, y3', x3, y3)
    jump(x1, y1)
    polygon1(w, h1, bianshu)
    jump(x2, y2)
    polygon1(w, h2, bianshu)
    jump(x3, y3)
    polygon1(w, h3, bianshu)
   
}

const france1 = function(x, y) {
    var w = 300
    var h = 200
    var bianshu = 4
    var n = 1

    var h1 = h * 0.3
    var y1 = y
    var x1 = x
    
    while(n <= 3)  {
        jump(x1, y1)
        y1 = y + h1 * n
        polygon1(w, h1, bianshu)
        
        n += 1
    }
    y1 =  y + h1 
   return  y1
}

const franceSamll = function(x, y) {
    var w = 300
    var h = 200 * 0.3
    var h1 = h * 1 / 8
    var h2 = h * 6 / 8
    var h3 = h * 1 / 8
    var bianshu = 4

    var x1 = x
    var y1 = y 
    var y2 = y1 + h1
    var y3 = y2 + h2
 
    log('h',h, h1, h2, h3)
    log('y', y, y1, y2, y3)
    jump(x1, y1)
    polygon1(w, h1, bianshu)
    
    jump(x1, y2)
    polygon1(w, h2, bianshu)

    jump(x1, y3)
    polygon1(w, h1, bianshu)

}
const gambia = function(x, y) {
   var x1 = x 
   var y1 =  france1(x, y)
    franceSamll(x1, y1)
}

const germany = function(x, y) {
    jump(x, y)
    var w = 300
    var h = 300
    var  bianshu = 4
    var n = 3

    while(n > 0) {
        var w1 = 1 / 3 * w
        polygon1(w1, h, bianshu)
       
        n -= 1
    }

}


// 作业 10
// 画 瑞士国旗
// switzerland(x, y)

// 实现步骤
//     瑞士国旗由一个大矩形和两个小矩形组成, 需要画三个矩形

// 分步提示:
// 1. 瑞士国旗中的两个矩形大小是一样的, 都按照长边 75, 短边 25 来计算
// 2. 计算出三个矩形的中心点坐标、长、宽
// 3. 依次画出这三个矩形

const switzerland = function(x, y) {
    var w = 200
    var h = 150
    var w1 = 75
    var h1 = 25
    var bianshu = 4

    var x1  = x + w / 2
    var y1 = y + w / 2

    center_rect(x1, y1, w, h)
    center_rect(x1, y1, w1, h1)
    center_rect(x1, y1, h1, w1)


} 
const  northkorea = function(x, y) {
    var w = 200
    var h = 150

    var h1 = 4 / 25 * h
    var h2 = 1 / 25 * h
    var h3 = 15 / 25 * h
    var h4 = 1 / 25 * h
    var h5 = 4 / 25 * h

    var x1 = x
    var y1 = y
    var y2 = y1 + h1
    var y3 = y2 + h2
    var y4 = y3 + h3
    var y5 = y4 + h4

    // rect(x1, y1, w, h1)
    // rect(x1, y2, w, h2)
    rect(x1, y3, w, h3)
    // rect(x1, y4, w, h4)
    // rect(x1, y5, w, h5)

    var xn = x + w * 2 / 5
    var yn = y + h / 2
    var rn = h3 / 3
    circle(xn, yn, rn)
    penta(xn, yn, rn)
}
const _main = function() {
    // circle(-100, -100, 50) // 圆形

    // penta(0, 0, 50) // 正五角星

    // japan(-100, -150) // 日本国旗

    // penta1(0, 0, 50) // 五角星函数

    //  china(-200, -160) // 国旗

    //  france(-100, -150) // 法国国旗

    //  germany(-100, -150) // 画德国国旗

    // gambia(-100, -100) // 冈比亚国旗

    // switzerland(-100, -100)

    // center_rect(-100, -100, 50, 100)

    northkorea(-100, -100)
}
_main()